\documentclass[landscape]{article}
\usepackage[margin=.5in]{geometry}
\usepackage{array}
\usepackage{longtable}
\usepackage{multirow}
\usepackage[colorlinks=true,linkcolor=blue]{hyperref}
% \usepackage{seqsplit}


\begin{document}
{
\centering

\includegraphics{./images/SamHughesHuskies}

\Huge
\textbf{Sam Hughes Student Directory\\ 2016-17}

}
\newpage
\tableofcontents
\newpage

<<libraries, echo = FALSE, message = FALSE, warning = FALSE>>=
library(HTGPackage)
library(reshape2)
library(ggplot2)
@

% read in data from qualtrics and create directory pages
<<ReadIn, echo = FALSE, warning = FALSE, message=FALSE, results = 'hide', fig.keep='none'>>=
dfall <- read.csv("DirectoryData/SHDirectory_January_11.csv", skip = 1, stringsAsFactors = FALSE)[-1, ]
dfall$date <- as.Date(gsub("(.*)\\s.*", "\\1", dfall$Start.Date), "%Y-%m-%d")
# ggplot(dfall, aes(x = date)) + geom_bar() + xlim(as.Date(c("2016-08-29", "2016-9-26"))) + plotTheme()#highlight when emailwas sent

df <- dfall[, 15:28]
names(df) <- c("Child",
               "Parent1",
               "Parent1.email",
               "Parent1.listserve",
               "Parent1.cell",
               "Parent1.home",
               "Parent2",
               "Parent2.email",
               "Parent2.listserve",
               "Parent2.cell",
               "Parent2.home",
               "Address",
               "Class",
               "accept")

df$Parent1.email.clean <- gsub("_", "\\\\_", df$Parent1.email)
df$Parent2.email.clean <- gsub("_", "\\\\_", df$Parent2.email)

df[which(grepl("JULIAN GARCIA", df$Child)),]$Child <- "Julian Garcia"
df[which(grepl("JULIAN GARCIA", df$Child, ignore.case = TRUE)), c("Parent1", "Parent1.email.clean")] <- 
  c("Ashley Martinez", tolower(df[which(grepl("JULIAN GARCIA", df$Child, ignore.case = TRUE)),]$Parent1.email.clean))


df$Child.clean <- gsub("&", "\\\\&", df$Child)
df$Child.clean <- gsub(",", " ", df$Child.clean)
df$Child.clean <- gsub("\\s+", " ", df$Child.clean)
df$Child.clean <- gsub("^(\\s)", "", df$Child.clean)
df$Child.clean <- gsub("(\\s)$", "", df$Child.clean)


df$Parent1 <- gsub(",", " ", df$Parent1)
df$Parent2 <- gsub(",", " ", df$Parent2)
df$Parent1 <- gsub("\\s+", " ", df$Parent1)
df$Parent2 <- gsub("\\s+", " ", df$Parent2)
df$Parent1 <- gsub("&", "\\\\&", df$Parent1)
df$Parent2 <- gsub("&", "\\\\&", df$Parent2)

df$Address <- gsub("#", "\\\\#", df$Address)
byStudent <- melt(df, id = c("Child", "Address", "Class"))

df[which(df$Child.clean == "Sienna Whittier"), ]$Address <- df[which(df$Child.clean == "Sienna"), ]$Address
df <- df[-which(df$Child.clean %in% c("Lyla Flores", "JOrdnaCarlton", "Sienna", "Joseph alexander flores", "Zenara Dattola", "Orion Abrell", "Quincy Reed Kirsten")), ]
df[which(df$Child.clean == "Carlton"), ]$Child.clean <- "Jordna Carlton"
df[which(df$Child.clean == "BROOKE VALENCIA"), c("Child.clean", "Parent1")] <- c("Brooke Valencia", "Annette Valencia")
df[which(df$Child.clean == "Sylvan LaRoche"), c("Parent1.cell", "Parent2.cell")] <- ""

#Remove duplicate entries keeping the entry with the most data
students <- unique(df$Child.clean)
to.drop <- c()
for(i in 1:length(students)){
  entries <- which(df$Child.clean == students[i])
  
  if(length(entries) > 1){
    data <- c()
    for(j in entries){
      data <- c(data, nchar(paste(df[j, ], collapse = "")))
    }
    # if(all.equal(data))
    shorter <- which(data != max(data))
    if(length(which(data == max(data))) > 1){
      exact.dups <- length(which(data == max(data)))
      shorter <- c(shorter, which(data == max(data))[1:(exact.dups-1)])
    }
    to.drop <- c(to.drop, entries[shorter])
  }
}

df <- df[-to.drop, ]


#Manually remove non-exact duplicates
df <- df[-which(grepl("Luna Cortez-Shenk", df$Child.clean)), ]
df <- df[-which(grepl("Jose Castro-Campoy", df$Child.clean)), ]
df <- df[-which(grepl("Nadia Snider-Simon", df$Child.clean)), ]
df <- df[-which(grepl("Jolena L Andersen", df$Child.clean)), ]
df <- df[-which(grepl("Alanna ingalsbe", df$Child.clean)), ]

df[which(grepl("Henry Mashrsky", df$Child.clean)), "Address" ] <- "336 N TREAT AVE"
df <- df[-which(grepl("Henry Masursky", df$Child.clean)), ]

@

<<export_Listserve, echo = FALSE>>=
listServe <- c()
for(i in 1:nrow(df)){
  if(df[i, "Parent1.listserve"] == "Please include my e-mail on the PTA listserve."){
    listServe <- c(listServe, df$Parent1.email)
  }
  if(df[i, "Parent2.listserve"] == "Please include my e-mail on the PTA listserve."){
    listServe <- c(listServe, df$Parent2.email)
  }
}
listServe <- unique(listServe)
listServe  <- listServe[which(listServe != "")]
write.csv(t(t(listServe)), "./ListServeEmails.csv", row.names = FALSE)
@

<<add in declined students, echo = FALSE>>=
allst <- read.csv("./DirectoryData/MasterStudentList.csv", header = FALSE)
allst$last <- matrix(unlist(strsplit(as.character(allst$V1), split = ",")), 347, 2, byrow = T)[, 1]
allst$first <- gsub("\\s(\\w+)\\s.+", "\\1", matrix(unlist(strsplit(as.character(allst$V1), split = ",")), 347,2, byrow = T)[, 2])

#find declined
dec <- c()
for(i in 1:nrow(allst)){
  if(!any(grepl(allst$last[i], df$Child.clean))){
    dec <- c(dec, i)
  }
}
dfdec <- df[1:length(dec),]
dfdec$Child.clean <- with(allst[dec, ], paste0(first, " ", last))
dfdec$Child <- dfdec$Child.clean
dfdec$Class <- allst[dec, "V2"]
dfdec[, -which(names(dfdec) %in% c("Child.clean", "Class", "Child"))] <- ""

noAdd <- c("Jose Castro Campoy", "Maximiliano1 Celaya Priefert", "Zoe Groseclose", "Christopher McDaniels", "Sylvan Laroche", "Nola LaRochelle-Gittings", "Grace McQuary", "Dylan Dominguez", "Calista Poupeau Escobar", " Esteban0315257012 Tabanico Olivarria", "Anvi Sharma", "Jack Feeney-Munoz", "Henry Masursky", "Samantha Ortiz Sanchez")

dfdec <- dfdec[-which(dfdec$Child %in% noAdd), ]
df <- rbind(df, dfdec)
@

<<WideData, echo = FALSE, eval = TRUE>>=
dfl <- melt(df[, c(2:17)], id = "Child.clean")
write.csv(dfl, file = "LongForm_SH_DirectoryData.csv")
write.csv(df, file = "WideForm_SH_DirectoryData.csv")
@

%Separate out by grade and teacher then print a section and table for each

<<Print table, echo = FALSE, results = 'asis'>>=
classes <- c("Kinder", "1st", "2nd", "3rd", "4th", "5th")
for(j in 1:length(classes)){
  writeLines(paste0("\\section{", classes[j], "}"))
  secClasses <- gsub("(\\w+)\\-\\w+", "\\1", unique(df[which(grepl(classes[j], df$Class)), ]$Class))
  for(k in 1:length(secClasses)){
    writeLines(paste0("\\subsection{", secClasses[k], "}"))
    tmpdf <- df[which(grepl(secClasses[k], df$Class)), ]
    tmpdf <- tmpdf[order(tmpdf$Child), ]
    #Print the table for the class
    writeLines("\\begin{longtable}{|p{100pt}|p{100pt}|p{140pt}|p{60pt}|p{64pt}|p{120pt}|}")
    writeLines("\\textbf{Student Name} & \\textbf{Parent Name} & \\textbf{Parent e-mail} & \\textbf{Cell Phone} & \\textbf{Home Phone} & \\textbf{Address}\\\\")
    writeLines("\\hline")
    writeLines("\\hline")
    for(i in 1:dim(tmpdf)[1]){
      if(tmpdf$Child[i] != ""){
        writeLines(paste0("\\multirow{2}{100pt}{", tmpdf$Child.clean[i], "} & ", tmpdf$Parent1[i], " & ", tmpdf$Parent1.email.clean[i], " & ", tmpdf$Parent1.cell[i], " & ", tmpdf$Parent1.home[i], " & ", "\\multirow{2}{120pt}{", tmpdf$Address[i], "} \\\\"))
        writeLines(paste0(" & ", tmpdf$Parent2[i], " & ", tmpdf$Parent2.email.clean[i], " & ", tmpdf$Parent2.cell[i], " & ", tmpdf$Parent2.home[i], " & \\\\"))
        writeLines("\\hline")
        
      }
    }
    writeLines("\\end{longtable}")
    writeLines("\\newpage")
  }
}
  





@
\hline


\end{document}